pheatmap::pheatmap(mat = as.matrix(EM), color = brewer.pal(name = "RdPu", n = 9),
# clustering_distance_rows = 'eucledian', clustering_distance_cols = 'eucledian',
#annotation_col=design,
#annotation_colors = annColour,
cluster_cols = TRUE, cluster_rows = T,
show_rownames = T,show_colnames = FALSE)
pheatmap::pheatmap(mat = as.matrix(EM), color = brewer.pal(name = "RdPu", n = 9),
# clustering_distance_rows = 'eucledian', clustering_distance_cols = 'eucledian',
#annotation_col=design,
#annotation_colors = annColour,
cluster_cols = F, cluster_rows = T,
show_rownames = T,show_colnames = FALSE)
pheatmap::pheatmap(mat = as.matrix(EM), color = brewer.pal(name = "RdPu", n = 9),
# clustering_distance_rows = 'eucledian', clustering_distance_cols = 'eucledian',
#annotation_col=design,
#annotation_colors = annColour,
cluster_cols = T, cluster_rows = F,
show_rownames = T,show_colnames = FALSE)
pheatmap::pheatmap(mat = as.matrix(t(EM)), color = brewer.pal(name = "RdPu", n = 9),
# clustering_distance_rows = 'eucledian', clustering_distance_cols = 'eucledian',
#annotation_col=design,
#annotation_colors = annColour,
cluster_cols = T, cluster_rows = F,
show_rownames = T,show_colnames = FALSE)
pheatmap::pheatmap(mat = as.matrix(t(EM)), color = brewer.pal(name = "RdPu", n = 9),
# clustering_distance_rows = 'eucledian', clustering_distance_cols = 'eucledian',
#annotation_col=design,
#annotation_colors = annColour,
cluster_cols = T, cluster_rows = T,
show_rownames = F,show_colnames = FALSE)
?pheatmap
pheatmap::pheatmap(mat = as.matrix(t(EM)), color = brewer.pal(name = "RdPu", n = 9),
clustering_distance_rows = 'eucledian', clustering_distance_cols = 'eucledian',
#annotation_col=design,
#annotation_colors = annColour,
cluster_cols = T, cluster_rows = T,
show_rownames = F,show_colnames = FALSE)
pheatmap::pheatmap(mat = as.matrix(t(EM)), color = brewer.pal(name = "RdPu", n = 9),
clustering_distance_rows = 'euclidean', clustering_distance_cols = 'euclidean',
#annotation_col=design,
#annotation_colors = annColour,
cluster_cols = T, cluster_rows = T,
show_rownames = F,show_colnames = FALSE)
pheatmap::pheatmap(mat = as.matrix(t(EM)), color = brewer.pal(name = "RdPu", n = 9),
clustering_distance_rows = 'euclidean', #clustering_distance_cols = 'euclidean',
#annotation_col=design,
#annotation_colors = annColour,
cluster_cols = T, cluster_rows = T,
show_rownames = F,show_colnames = FALSE)
pheatmap::pheatmap(mat = as.matrix(dm), color = brewer.pal(name = "RdPu", n = 9),
#clustering_distance_rows = dm, clustering_distance_cols = dm,
#annotation_col=design,
#annotation_colors = annColour,
cluster_cols = TRUE, cluster_rows = T,
show_rownames = T,show_colnames = T)
dm<-dist(t(EM))
pheatmap::pheatmap(mat = as.matrix(dm), color = brewer.pal(name = "RdPu", n = 9),
#clustering_distance_rows = dm, clustering_distance_cols = dm,
#annotation_col=design,
#annotation_colors = annColour,
cluster_cols = TRUE, cluster_rows = T,
show_rownames = T,show_colnames = T)
library(heatmap.2)
average.lin <- function(x) hclust(x, method="average") #average linkage
heatmap.2(EM, hclustfun=average.lin, #RowSideColors = c(rep("blue", 32),rep("yellow", 32), rep("magenta", 32)),
col=redgreen, trace="none",
dendrogram = c("both"))#, main="Heatmap of gene expression")
library(gplots)
heatmap.2(EM, hclustfun=average.lin, #RowSideColors = c(rep("blue", 32),rep("yellow", 32), rep("magenta", 32)),
col=redgreen, trace="none",
dendrogram = c("both"))#, main="Heatmap of gene expression")
dim(EM)
pheatmap::pheatmap(mat = as.matrix(EM), color = brewer.pal(name = "RdPu", n = 9),
clustering_distance_rows = 'euclidean', #clustering_distance_cols = 'euclidean',
#annotation_col=design,
#annotation_colors = annColour,
cluster_cols = T, cluster_rows = T,
show_rownames = F,show_colnames = FALSE)
pheatmap::pheatmap(mat = as.matrix(EM), color = brewer.pal(name = "RdPu", n = 9),
clustering_distance_rows = 'euclidean', #clustering_distance_cols = 'euclidean',
annotation_col=design,
#annotation_colors = annColour,
cluster_cols = T, cluster_rows = T,
show_rownames = F,show_colnames = FALSE)
names(samplesMatrix)
design<-subset(samplesMatrix[,c('tumourTypes','tumourStages','PAM50')])#, 'tss'
row.names(design)<-samplesMatrix$barcode
#recorder annotations
#design$PAM50 = factor(design$PAM50, levels = c("Basal-like", "HER2-enriched", "Luminal A", "Luminal B", "Normal-like", "normal"))
design$tumourTypes = factor(design$tumourTypes, levels = c("female_84803", "female_85003", "female_85203", "female_85223","female_85233", "female_85753 ", "unknown")) #here unknown is mixed
design$tumourStages = factor(design$tumourStages, levels = c("stage1", "stage2", "stage3", "stage4", "unknown"))
PAM50Col= c( "turquoise4", "darkorange2", "slateblue2", "palevioletred2", "gold2", "olivedrab3")
tumourTypCol = c( "#bebada", "#8dd3c7","#b3de69",  "#fb8072", "#80b1d3", "#fdb462","white")
#tumourTypCol = c(  "khaki2","palegreen1",  "tomato1","royalblue4","yellowgreen","deeppink3", "aquamarine1")
tumourStgCol = c( "coral1","coral4","salmon3", "sandybrown", "white")
#names(PAM50Col)<-levels(design$PAM50)
names(tumourTypCol)<-levels(design$tumourTypes)
names(tumourStgCol)<-levels(design$tumourStages)
annColour <-list(
#PAM50=PAM50Col,
tumourTypes=tumourTypCol,
tumourStages=tumourStgCol
)
######
names(samplesMatrix)
design<-subset(samplesMatrix[,c('tumourTypes','tumourStages']#,'PAM50')])#, 'tss'
row.names(design)<-samplesMatrix$barcode
#recorder annotations
#design$PAM50 = factor(design$PAM50, levels = c("Basal-like", "HER2-enriched", "Luminal A", "Luminal B", "Normal-like", "normal"))
design$tumourTypes = factor(design$tumourTypes, levels = c("female_84803", "female_85003", "female_85203", "female_85223","female_85233", "female_85753 ", "unknown")) #here unknown is mixed
design$tumourStages = factor(design$tumourStages, levels = c("stage1", "stage2", "stage3", "stage4", "unknown"))
PAM50Col= c( "turquoise4", "darkorange2", "slateblue2", "palevioletred2", "gold2", "olivedrab3")
tumourTypCol = c( "#bebada", "#8dd3c7","#b3de69",  "#fb8072", "#80b1d3", "#fdb462","white")
#tumourTypCol = c(  "khaki2","palegreen1",  "tomato1","royalblue4","yellowgreen","deeppink3", "aquamarine1")
tumourStgCol = c( "coral1","coral4","salmon3", "sandybrown", "white")
#names(PAM50Col)<-levels(design$PAM50)
names(tumourTypCol)<-levels(design$tumourTypes)
names(tumourStgCol)<-levels(design$tumourStages)
annColour <-list(
#PAM50=PAM50Col,
tumourTypes=tumourTypCol,
tumourStages=tumourStgCol
)
######
# normalise with log
dge <- DGEList(newdataSE)
dge <- calcNormFactors(object=dge, method="TMM")
design<-subset(samplesMatrix[,c('tumourTypes','tumourStages')])#,'PAM50')])#, 'tss'
row.names(design)<-samplesMatrix$barcode
design$tumourTypes = factor(design$tumourTypes, levels = c("female_84803", "female_85003", "female_85203", "female_85223","female_85233", "female_85753 ", "unknown")) #here unknown is mixed
design$tumourStages = factor(design$tumourStages, levels = c("stage1", "stage2", "stage3", "stage4", "unknown"))
tumourTypCol = c( "#bebada", "#8dd3c7","#b3de69",  "#fb8072", "#80b1d3", "#fdb462","white")
tumourStgCol = c( "coral1","coral4","salmon3", "sandybrown", "white")
names(tumourTypCol)<-levels(design$tumourTypes)
names(tumourStgCol)<-levels(design$tumourStages)
annColour <-list(
#PAM50=PAM50Col,
tumourTypes=tumourTypCol,
tumourStages=tumourStgCol
)
annColour
pheatmap::pheatmap(mat = as.matrix(EM), color = brewer.pal(name = "RdPu", n = 9),
clustering_distance_rows = 'euclidean', #clustering_distance_cols = 'euclidean',
annotation_col=design,
annotation_colors = annColour,
cluster_cols = T, cluster_rows = T,
show_rownames = F,show_colnames = FALSE)
dataSE<-get(load("BRCA_Illumina_HiSeqnew_updatedSE_allFemale_PreprocessedData_wo_batch_GC_010_updatedSE_allTypes_allStages_Female.rda"))
samplesMatrix<-get(load("BRCA_Illumina_HiSeqnew_updatedSE_allFemale_PreprocessedData_wo_batch_GC_010_sampleMatrix_allTypes_allStages_Female.rda"))
#### extract data only for autophagy genes
getAutophagyGenes <- function(dataSE){
autophagy_genes<- as.vector(read.table("autopahagy_genes.txt", as.is = T, header = FALSE))$V1
all_genes<-rownames(dataSE)
shared <- intersect(autophagy_genes,all_genes)
newdataSE<- dataSE[c(shared),]
print(paste0("Total number of genes: ", length(all_genes)))
print(paste0("Autophagy genes: ", length(shared)))
return(newdataSE)
}
dataSE <- getAutophagyGenes(dataSE)
dim(dataSE)
addPAM50removePairedCancer<-function(samples.matrix){
# get information on subtype/pation details
#dataSubt <- TCGAquery_subtype(tumor = "BRCA")
dataSubt<-get(load("dataSubt.rda"))
#add extra patient information, but some have NAs; if FALSE- no NAs but lose ~200 patients #~735
subdiagnosis <- merge(samples.matrix, dataSubt, by="patient", all.x=TRUE)
subdiagnosis <- subdiagnosis[order(subdiagnosis$myorder), ]
# get barcodes of samples with no subtype label (Luminal etc.)
no_diag <- subdiagnosis[is.na(subdiagnosis$PAM50.mRNA), ]
no_diag <- no_diag$barcode
print (length(no_diag))
# get barcodes of patients with paired samples
paired <- samples.matrix[ duplicated(samples.matrix$participant, fromLast=FALSE) | duplicated(samples.matrix$participant, fromLast=TRUE),] #get patients with 2 entries
paired <- as.character(paired$participant)  #get patients with 2 entries
#get cancer samples from paired data
paired <- samples.matrix[samples.matrix$participant %in% paired & samples.matrix$condition == "cancer", ]
paired <- as.character(paired$barcode)
# concatnate barcodes to remove
#join NA and paired cancer samples
to_remove<- unique(sort(c(as.character(no_diag), as.character(paired))))
# OTHER OPTION dont remove paired
#to_remove <- unique(sort(as.character(no_diag)))
print(length(to_remove))
# remove samples with no subdtype label and paired tumor sample from dataframe, subtype vector and ID-information.
samples.matrix <- samples.matrix[!samples.matrix$barcode %in% to_remove, ]
subdiagnosis <- subdiagnosis[!subdiagnosis$barcode %in% to_remove, ]
# make normal samples from pairs "normal" while retaining info on subtype.
subdiagnosis$PAM50 <- ifelse(subdiagnosis$condition == "normal", "normal", as.character(subdiagnosis$PAM50.mRNA))
return(list(samples.matrix=subdiagnosis, samplesToremove=to_remove))
}
PAMNPout<-addPAM50removePairedCancer(samplesMatrix)
samplesMatrix<-PAMNPout$samples.matrix #578/1191
sampleToremoveSE <- PAMNPout$samplesToremove
# if used addPAM50removePairedCancer DO THIS:
newdataSE<- dataSE[,!colnames(dataSE) %in% sampleToremoveSE]
dim(newdataSE) #7449x515 or 579 if include paired
names(samplesMatrix)
design<-subset(samplesMatrix[,c('tumourTypes','tumourStages','PAM50')])#, 'tss'
row.names(design)<-samplesMatrix$barcode
#recorder annotations
design$PAM50 = factor(design$PAM50, levels = c("Basal-like", "HER2-enriched", "Luminal A", "Luminal B", "Normal-like", "normal"))
design$tumourTypes = factor(design$tumourTypes, levels = c("female_84803", "female_85003", "female_85203", "female_85223","female_85233", "female_85753 ", "unknown")) #here unknown is mixed
design$tumourStages = factor(design$tumourStages, levels = c("stage1", "stage2", "stage3", "stage4", "unknown"))
PAM50Col= c( "turquoise4", "darkorange2", "slateblue2", "palevioletred2", "gold2", "olivedrab3")
tumourTypCol = c( "#bebada", "#8dd3c7","#b3de69",  "#fb8072", "#80b1d3", "#fdb462","white")
#tumourTypCol = c(  "khaki2","palegreen1",  "tomato1","royalblue4","yellowgreen","deeppink3", "aquamarine1")
tumourStgCol = c( "coral1","coral4","salmon3", "sandybrown", "white")
names(PAM50Col)<-levels(design$PAM50)
names(tumourTypCol)<-levels(design$tumourTypes)
names(tumourStgCol)<-levels(design$tumourStages)
annColour <-list(
PAM50=PAM50Col,
tumourTypes=tumourTypCol,
tumourStages=tumourStgCol
)
dge <- DGEList(newdataSE)
dge <- calcNormFactors(object=dge, method="TMM")
EM <- cpm(x=dge, log=TRUE)
(dm)
pheatmap::pheatmap(mat = as.matrix(EM), color = brewer.pal(name = "RdPu", n = 9),
clustering_distance_rows = 'euclidean', #clustering_distance_cols = 'euclidean',
annotation_col=design,
annotation_colors = annColour,
cluster_cols = T, cluster_rows = T,
show_rownames = F,show_colnames = FALSE)
setwd("~/Bioinformatics MSc UCPH/0_MasterThesis/autophagy_genes_lists")
#autophagy genes cathegories
lipid<- as.vector(read.table("lipid.txt", as.is = T, header = FALSE))$V1
phosphatidyl<- as.vector(read.table("phosphatidylinositol.txt", as.is = T, header = FALSE))$V1
endo_exosomes<- as.vector(read.table("endo_exosomes.txt", as.is = T, header = FALSE))$V1
transport<- as.vector(read.table("transport.txt", as.is = T, header = FALSE))$V1
rabs<- as.vector(read.table("rabs_and_effectors.txt", as.is = T, header = FALSE))$V1
docking_and_fusion<- as.vector(read.table("docking_and_fusion.txt", as.is = T, header = FALSE))$V1
mito<- as.vector(read.table("mito.txt", as.is = T, header = FALSE))$V1
autophagic_core<- as.vector(read.table("autophagic_core.txt", as.is = T, header = FALSE))$V1
transcription_factors<- as.vector(read.table("transcription_factors.txt", as.is = T, header = FALSE))$V1
receptors_and_ligands<- as.vector(read.table("receptors_and_ligands.txt", as.is = T, header = FALSE))$V1
mTOR_induction<- as.vector(read.table("induction_mTOR.txt", as.is = T, header = FALSE))$V1
lysosome<- as.vector(read.table("lysosome.txt", as.is = T, header = FALSE))$V1
autophagy_genes <- list (
lipid=lipid,
phosphatidyl = phosphatidyl,
endo_exosomes = endo_exosomes,
transport = transport,
rabs = rabs,
docking_fusion = docking_and_fusion,
mito = mito,
autoph_core = autophagic_core,
transcr_factors = transcription_factors,
receptors_ligands = receptors_and_ligands,
mTOR_induction = mTOR_induction,
lysosome = lysosome
)
all_auto_genes <- vector(mode="character", length=0)
for (i in 1:length(autophagy_genes)){
print(paste0(names(autophagy_genes[i]), ":       ",length(unique(autophagy_genes[[i]])),"/",length(autophagy_genes[[i]])," unique in this group" ))
all_auto_genes<-append(all_auto_genes,unique(autophagy_genes[[i]]))
}
length(all_auto_genes) #1392
length(unique(all_auto_genes))#1183
length(all_auto_genes) #1392
length(unique(all_auto_genes))#1183
all_unique_auto_genes<-unique(all_auto_genes)
for (i in all_unique_auto_genes){
print (i)
}
autophagy_genes
for (name in names(autophagy_genes)) {
print(name)
#print(autophagy_genes[[name]])
}
gene_functions <- vector(mode="character", length=0)
gene_functions[1]
gene_functions[2]<-"ooo"
gene_functions[2]
gene_functions[1]
gene_functions <- vector(mode="character", length=0)
for (name in names(autophagy_genes)) {
print(name)
for (i in all_unique_auto_genes){
if(i %in% autophagy_genes[[name]]){
if (is.na(gene_function[i])) {
gene_function[i]<- name
}else{
gene_function[i]<- "multifunction"
}
}
}
}
for (name in names(autophagy_genes)) {
print(name)
for (i in all_unique_auto_genes){
if(i %in% autophagy_genes[[name]]){
if (is.na(gene_function[i])) {
gene_function[i]<- name
}else{
gene_function[i]<- "multifunction"
}
}
}
}
gene_functions <- vector(mode="character", length=0)
for (name in names(autophagy_genes)) {
print(name)
for (i in all_unique_auto_genes){
if(i %in% autophagy_genes[[name]]){
if (is.na(gene_functions[i])) {
gene_functions[i]<- name
}else{
gene_functions[i]<- "multifunction"
}
}
}
}
gene_functions
gene_functions[1:3]
typeof(gene_functions)
as.matrix(gene_functions)
auto_matrix<-as.matrix(gene_functions)
auto_matrix
dim(auto_matrix)
auto_matrix<-as.data.frame(gene_functions)
dim(auto_matrix)
rownames(auto_matrix)
auto_matrix$genes <-rownames(auto_matrix)
dim(auto_matrix)
rownames(auto_matrix)<-NULL
dim(auto_matrix)
head(auto_matrix)
save(auto_matrix, file="autophagy_functions.rda")
gene_functions <- get(load("autophagy_functions.rda"))
dim(design)
head(design)
gene_functions <- vector(mode="character", length=0)
for (name in names(autophagy_genes)) {
print(name)
for (i in all_unique_auto_genes){
if(i %in% autophagy_genes[[name]]){
if (is.na(gene_functions[i])) {
gene_functions[i]<- name
}else{
gene_functions[i]<- "multifunction"
}
}
}
}
gene_functions
gene_functions
pheatmap::pheatmap(mat = as.matrix(EM), color = brewer.pal(name = "RdPu", n = 9),
clustering_distance_rows = 'euclidean', #clustering_distance_cols = 'euclidean',
annotation_col=design,
annotation_colors = annColour,
annotation_row=gene_functions,
cluster_cols = T, cluster_rows = T,
show_rownames = F,show_colnames = FALSE)
save(genes_functions, file="autophagy_genes_functions.rda")
save(gene_functions, file="autophagy_genes_functions.rda")
g_functions <- get(load("autophagy_genes_functions.rda"))
g_functions <- get(load("autophagy_functions.rda"))
g_functions
dim(newdataSE)
rownames(newdataSE)
ok_autop_genes<-rownames(newdataSE)
rownames(g_functions)<-g_functions$genes
g_functions
ok_g_functions<-g_functions[c(ok_autop_genes),]
dim(ok_g_functions)
head(ok_g_functions)
head(t(ok_g_functions))
q<- <- get(load("autophagy_genes_functions.rda"))
q<- get(load("autophagy_genes_functions.rda"))
q
colnames(q)
names(q)
head(ok_g_functions)
row.names(design)
design
pheatmap::pheatmap(mat = as.matrix(EM), color = brewer.pal(name = "RdPu", n = 9),
clustering_distance_rows = 'euclidean', #clustering_distance_cols = 'euclidean',
annotation_col=design,
annotation_colors = annColour,
annotation_row=ok_g_functions,
cluster_cols = T, cluster_rows = T,
show_rownames = F,show_colnames = FALSE)
ok_g_functions$genes <-NULL
head(ok_g_functions)
?pheatmap
pheatmap::pheatmap(mat = as.matrix(EM), color = brewer.pal(name = "RdPu", n = 9),
clustering_distance_rows = 'euclidean', #clustering_distance_cols = 'euclidean',
annotation_col=design,
annotation_colors = annColour,
annotation_row=ok_g_functions,
cluster_cols = T, cluster_rows = T,
show_rownames = F,show_colnames = FALSE)
?pheatmap
pheatmap::pheatmap(mat = as.matrix(EM), color = brewer.pal(name = "RdPu", n = 9),
clustering_distance_rows = 'euclidean', #clustering_distance_cols = 'euclidean',
annotation_col=design,
annotation_colors = annColour,
annotation_row=ok_g_functions,
cluster_cols = T, cluster_rows = T,
show_rownames = F,show_colnames = FALSE,
fontsize = 8,
)
dim(EM)
average.lin <- function(x) hclust(x, method="average") #average linkage
heatmap.2(EM, hclustfun=average.lin, #RowSideColors = c(rep("blue", 32),rep("yellow", 32), rep("magenta", 32)),
col=redgreen, trace="none",
dendrogram = c("both"))#, main="Heatmap of gene expression")
pheatmap::pheatmap(mat = as.matrix(EM), color = brewer.pal(name = "RdPu", n = 9),
clustering_distance_rows = 'euclidean', #clustering_distance_cols = 'euclidean',
annotation_col=design,
annotation_colors = annColour,
annotation_row=ok_g_functions,
cluster_cols = T, cluster_rows = T,
show_rownames = F,show_colnames = FALSE,
fontsize = 8)
pheatmap::pheatmap(mat = as.matrix(EM), color = brewer.pal(name = "RdPu", n = 9),
clustering_distance_rows = 'euclidean', #clustering_distance_cols = 'euclidean',
annotation_col=design,
annotation_colors = annColour,
annotation_row=ok_g_functions,
cluster_cols = T, cluster_rows = T,
show_rownames = F,show_colnames = FALSE,
fontsize = 5)
for (i in 1:length(autophagy_genes)){
print(paste0(names(autophagy_genes[i]), ":       ",length(unique(autophagy_genes[[i]])),"/",length(autophagy_genes[[i]])," unique in this group" ))
all_auto_genes<-append(all_auto_genes,unique(autophagy_genes[[i]]))
}
ok_g_functions
head(ok_g_functions)
ok_autop_genes
rownames(ok_autop_genes)
rownames(ok_g_functions)
(ok_g_functions)
(ok_g_functions[,1])
g_functions <- get(load("autophagy_functions.rda"))       #### add comments!
rownames(g_functions)<-g_functions$genes
ok_autop_genes<-rownames(newdataSE)
ok_g_functions<-g_functions[c(ok_autop_genes),]
dim(ok_g_functions)
head(ok_g_functions)
unique(ok_g_functions$gene_functions)
thirteen_cols<- c("#3579b4","#c8c049","#8996da","#ee5345",
"#c84297","#43ea3b","#50a376","#281340",
"#6e5c41","#fd0d32","#f19832","#94f5d2","#b1f555")
ok_g_functions$gene_functions=factor(ok_g_functions$gene_functions,
levels=c("multifunction","lipid","phosphatidyl","endo_exosomes",
"transport","rabs","docking_fusion","mito","autoph_core",
"transcr_factors","receptors_ligands", "mTOR_induction","lysosome"))
thirteen_cols<- c("#3579b4","#c8c049","#8996da","#ee5345",
"#c84297","#43ea3b","#50a376","#281340",
"#6e5c41","#fd0d32","#f19832","#94f5d2","#b1f555")
ok_g_functions$gene_functions=factor(ok_g_functions$gene_functions,
levels=c("multifunction","lipid","phosphatidyl","endo_exosomes",
"transport","rabs","docking_fusion","mito","autoph_core",
"transcr_factors","receptors_ligands", "mTOR_induction","lysosome"))
names(thirteen_cols)<-levels(ok_g_functions$gene_functions)
names(thirteen_cols)
geneColour <-list(
gene_functions=thirteen_cols
)
geneColour
ok_g_functions$genes <-NULL
?pheatmap
annColour <-list(
PAM50=PAM50Col,
tumourTypes=tumourTypCol,
tumourStages=tumourStgCol,
gene_functions=thirteen_cols
)
annColour <-list(
PAM50=PAM50Col,
tumourTypes=tumourTypCol,
tumourStages=tumourStgCol,
gene_functions=thirteen_cols
)
dge <- DGEList(newdataSE)
annColour
pheatmap::pheatmap(mat = as.matrix(EM), color = brewer.pal(name = "RdPu", n = 9),
clustering_distance_rows = 'euclidean', #clustering_distance_cols = 'euclidean',
annotation_col=design,
annotation_colors = annColour,
annotation_row=ok_g_functions,
cluster_cols = T, cluster_rows = T,
show_rownames = F,show_colnames = FALSE,
fontsize = 5)
tumourStgCol = c( "red","green","blue", "yellow", "white")
names(tumourStgCol)<-levels(design$tumourStages)
annColour <-list(
PAM50=PAM50Col,
tumourTypes=tumourTypCol,
tumourStages=tumourStgCol,
gene_functions=thirteen_cols
)
pheatmap::pheatmap(mat = as.matrix(EM), color = brewer.pal(name = "RdPu", n = 9),
clustering_distance_rows = 'euclidean', #clustering_distance_cols = 'euclidean',
annotation_col=design,
annotation_colors = annColour,
annotation_row=ok_g_functions,
cluster_cols = T, cluster_rows = T,
show_rownames = F,show_colnames = FALSE,
fontsize = 5)
pheatmap::pheatmap(mat = as.matrix(EM), color = brewer.pal(name = "RdPu", n = 9),
clustering_distance_rows = 'euclidean', #clustering_distance_cols = 'euclidean',
annotation_col=design,
annotation_colors = annColour,
annotation_row=ok_g_functions,
cluster_cols = T, cluster_rows = T,
show_rownames = F,show_colnames = FALSE,
fontsize = 5)
