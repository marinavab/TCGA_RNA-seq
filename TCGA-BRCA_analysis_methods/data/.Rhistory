library(TCGAbiolinks)
library(SummarizedExperiment)
library(TCGAbiolinks)
query.exp <- GDCquery(project = "TCGA-BRCA",
legacy = TRUE,
data.category = "Gene expression",
data.type = "Gene expression quantification",
platform = "Illumina HiSeq",
file.type = "results",
experimental.strategy = "RNA-Seq",
sample.type = c("Primary solid Tumor","Solid Tissue Normal"))
GDCdownload(query.exp)
devtools::install_github(repo="BioinformaticsFMRP/TCGAbiolinksGUI" )
source("https://bioconductor.org/biocLite.R")
biocLite("minfi")
devtools::install_github(repo="BioinformaticsFMRP/TCGAbiolinksGUI" )
biocLite("siggenes")
devtools::install_github(repo="BioinformaticsFMRP/TCGAbiolinksGUI" )
source("https://bioconductor.org/biocLite.R")
biocLite("TCGAbiolinksGUI")
library(TGCAbiolinksGUI)
library(TCGAbiolinksGUI)
TCGAbiolinksGUI()
library(ABCdata)
library(ggplot2)
library(RColorBrewer)
library(edgeR)
data(YeastTimeSeries)
dim(YeastTimeSeries$Expression)
YeastTimeSeries$Expression[1:3, 1:3]
?rowsum
x= as.data.matrix(YeastTimeSeries$Expression)
x= as.data.frame(YeastTimeSeries$Expression)
x[1:3, 1:3]
above_one <- rowSums(x  > 1)
dim(above_one)
?ldply
ls()
library(TCGAbiolinks)
library(TCGAbiolinksGUI)
sessionInfo()
library(TCGAbiolinks)
biocLite("RCurl")
source("https://bioconductor.org/biocLite.R")
biocLite("RCurl")
source("https://bioconductor.org/biocLite.R")
biocLite("BiocUpgrade")
library(BiocInstaller)
biocValid()
biocLite(c("shinyBS", "shinyjs"))
biocLite()
biocLite("cluster")
.libPaths()
library(TCGAbiolinks)
install.packages("cluster", repos=c("http://rstudio.org/_packages", "http://cran.rstudio.com"))
library(TCGAbiolinks)
install.packages("rtracklayer", repos=c("http://rstudio.org/_packages", "http://cran.rstudio.com"))
install.packages("rtracklayer", repos=c("http://rstudio.org/_packages", "http://cran.rstudio.com"))
devtools::install_github(repo = "BioinformaticsFMRP/TCGAbiolinks")
install.packages("curl")
devtools::install_github(repo = "BioinformaticsFMRP/TCGAbiolinks")
setRepositories()
source("http://bioconductor.org/biocLite.R")
biocLite("BiocUpgrade")
library(installr)
updateR()
library(plyr)
library(ggplot2)
library(RColorBrewer)
library(limma)
library(TCGAbiolinksGUI)
q()
library(edgeR)
library(Mfuzz)
#library(TCGAbiolinks)
library(SummarizedExperiment)
library(plyr)
library(edgeR)
library(ggplot2)
library(RColorBrewer)
library(limma)
suppressMessages(library(magrittr))
suppressMessages(library(tidyr))
suppressMessages(library(dplyr))
setwd("~/Bioinformatics MSc UCPH/0_MasterThesis/TCGAbiolinks/CBL_scripts/TCGA-BRCA_analysis_methods/data/")
source("../BRCA_functions.R")
dataSE<-get(load("BRCA_Illumina_HiSeqnew_updatedSE_allFemale_PreprocessedData_wo_batch_GC_010_withSampleInfo_SE.rda"))
samples.matrix<-get(load("BRCA_Illumina_HiSeqnew_updatedSE_allFemale_PreprocessedData_wo_batch_GC_010_withSampleInfo_SM.rda"))
dim(samples.matrix)
dim(dataSE)
########## PRE-ANALYIS STEPS ################
#### rename morphology
samples.matrix<-renameMorph(samples.matrix)
####  add clinical data
samples.matrix<-addClinData(samples.matrix)
#### add PAM50 annotation to samples.matrix and update data SE
PAMNPout<-addPAM50annotation(samples.matrix)
samples.matrix<-PAMNPout$samples.matrix #add annotation
dim(samples.matrix)
sampleTokeepSE <- PAMNPout$samplesToKeep #update SE
dataSE<- dataSE[,colnames(dataSE) %in% sampleTokeepSE]
dim(dataSE)
removedsamples<-removeDuctalOther(dataSE, samples.matrix)
dataSE<-removedsamples$dataSE
samples.matrix<-removedsamples$samples.matrix
dim(dataSE)
dim(samples.matrix)
## palettes (run all)
tnPalette=c("deeppink2", "dodgerblue2")
cbPalette <- c( "#E69F00", "#0072B2", "#F0E442", "#D55E00",  "#009E73", "#CC79A7",   "#56B4E9", "black")
tumourTypCol = c( "#56B4E9", "#F0E442", "#CC79A7", "#D55E00", "#0072B2", "#009E73", "#E69F00")
tumourStagesCol = c( "#009E73", "#F0E442", "#E69F00", "#CC79A7", "red3")
year_cols<-c("#3579b4", "#c8c049", "#8996da", "#ee5345", "#c84297",
"#ac8d3c", "#50a376", "#9f6f63", "#36d1c8", "#a63dbd",
"#8f2ccf", "#4e8fec", "#e7ad8a", "#d727b1", "#f27456",
"#ac8d3c", "#61789b", "#2896be", "#db1453", "#c7a233",
"#d9a5c8", "#1e785f", "#3183e5", "#82117f", "#e5cbb0",
"#d7b51c")
source_cols<-c("#fc8785", "#3cb777", "#575a6c", "#c390ec", "#c5eebd",
"#4dc9d5", "#d1f6f2", "#e4f90d", "#5c9134", "#4159e2",
"#f3132d", "#d0abef", "#80eb6e", "#05dda1", "#af7fae",
"#349ad6", "#f2e5a9", "#43a405", "#f05017", "#f655f5",
"#01e034", "#3f7f56", "#016ecd", "#e2523f", "#b270e4")
#### PERFORMING PCA ###
dim(dataSE)
dge <- DGEList(dataSE)
dge <- calcNormFactors(object=dge, method="TMM")
EM <- cpm(x=dge, log=TRUE)
# Perfrom PCA
pca <- prcomp(x=t(EM), scale=TRUE, center=TRUE)
library(extrafont)
loadfonts(device = "win")
#T/N
ggplot(data=as.data.frame(pca$x),aes(x=PC1,y=PC2,col=samples.matrix$PAM50))+
geom_point(size=2.1,alpha=0.9)+
scale_colour_manual(values=cbPalette)+
ggtitle("PCA plot of PAM50 subtypes and normal samples")+
labs(x="PC1 (11.04%)", y="PC2 (8.63%)")+
theme_classic(base_size = 12)+
theme(#legend.position="bottom",
legend.title=element_blank(),
plot.title = element_text(hjust = 0.1),
text=element_text(size=14,  family="serif"))
rm(list=ls(all=TRUE))
