#assign colours to subgroups
names(PAM50Col)<-levels(design$PAM50)
names(tumourTypCol)<-levels(design$Morphology)
names(tumourStgCol)<-levels(design$Stages)
names(tssCol)<-levels(design$tss)
# create list
annColour <-list(
PAM50=PAM50Col,
Morphology=tumourTypCol,
Stages=tumourStgCol
)
# normalise with log
dge <- DGEList(dataSE)
dge <- calcNormFactors(object=dge, method="TMM")
EM <- cpm(x=dge, log=TRUE)
EMc <- EM[, !(colnames(EM) %in% normal)] #select only cancer samples
EM_var<- apply(EMc, MARGIN=1, var) #calc var across the row
length(EM_var)
top_genes<- sort(EM_var, decreasing = TRUE)[1:1000] # sort data with hightest variance genes at the top, select top 1000
# cancer and normal
EM2<- subset(EM[c(names(top_genes)),]) #select top 1000 genes in the original EM object (that has both T and N samples)
dim(EM2) # should have 1000 rows
pheatmap::pheatmap(mat = as.matrix(EM2), color = colorRampPalette(brewer.pal(9,"YlGnBu"))(20),
clustering_distance_rows = 'euclidean',
clustering_distance_cols = 'euclidean',
annotation_col=design,
annotation_colors = annColour,
cluster_cols = T, cluster_rows = T,
show_rownames = F,show_colnames = F,
fontsize = 5)
dim(samples.matrix)
rm(list=ls(all=TRUE))
suppressMessages(library(magrittr))
suppressMessages(library(tidyr))
suppressMessages(library(dplyr))
setwd("~/Bioinformatics MSc UCPH/0_MasterThesis/TCGAbiolinks/CBL_scripts/TCGA-BRCA_analysis_methods/data/")
source("../BRCA_functions.R")
## most recent all types and stages cancer and normal
dataSE<-get(load("BRCA_Illumina_HiSeqnew_updatedSE_allFemale_PreprocessedData_wo_batch_GC_010_updatedSE_allTypes_allStages_Female.rda"))
samples.matrix<-get(load("BRCA_Illumina_HiSeqnew_updatedSE_allFemale_PreprocessedData_wo_batch_GC_010_sampleMatrix_allTypes_allStages_Female.rda"))
dim(samples.matrix)
dim(dataSE)
########## PRE-ANALYIS STEPS ################
#### rename morphology
samples.matrix<-renameMorph(samples.matrix)
####  add clinical data
samples.matrix<-addClinData(samples.matrix)
#### add PAM50 annotation to samples.matrix and update data SE
PAMNPout<-addPAM50annotation(samples.matrix)
samples.matrix<-PAMNPout$samples.matrix #add annotation
dim(samples.matrix)
sampleTokeepSE <- PAMNPout$samplesToKeep #update SE
dataSE<- dataSE[,colnames(dataSE) %in% sampleTokeepSE]
dim(dataSE)
removedsamples<-removeDuctalOther(dataSE, samples.matrix)
dataSE<-removedsamples$dataSE
samples.matrix<-removedsamples$samples.matrix
dim(dataSE)
dim(samples.matrix)
## palettes (run all)
tnPalette=c("deeppink2", "dodgerblue2")
cbPalette <- c( "#E69F00", "#0072B2", "#F0E442", "#D55E00",  "#009E73", "#CC79A7",   "#56B4E9", "black")
tumourTypCol = c( "#56B4E9", "#F0E442", "#CC79A7", "#D55E00", "#0072B2", "#009E73", "#E69F00")
tumourStagesCol = c( "#009E73", "#F0E442", "#E69F00", "#CC79A7", "red3")
year_cols<-c("#3579b4", "#c8c049", "#8996da", "#ee5345", "#c84297",
"#ac8d3c", "#50a376", "#9f6f63", "#36d1c8", "#a63dbd",
"#8f2ccf", "#4e8fec", "#e7ad8a", "#d727b1", "#f27456",
"#ac8d3c", "#61789b", "#2896be", "#db1453", "#c7a233",
"#d9a5c8", "#1e785f", "#3183e5", "#82117f", "#e5cbb0",
"#d7b51c")
source_cols<-c("#fc8785", "#3cb777", "#575a6c", "#c390ec", "#c5eebd",
"#4dc9d5", "#d1f6f2", "#e4f90d", "#5c9134", "#4159e2",
"#f3132d", "#d0abef", "#80eb6e", "#05dda1", "#af7fae",
"#349ad6", "#f2e5a9", "#43a405", "#f05017", "#f655f5",
"#01e034", "#3f7f56", "#016ecd", "#e2523f", "#b270e4")
#### PERFORMING PCA ###
dim(dataSE)
dge <- DGEList(dataSE)
dge <- calcNormFactors(object=dge, method="TMM")
EM <- cpm(x=dge, log=TRUE)
# Perfrom PCA
pca <- prcomp(x=t(EM), scale=TRUE, center=TRUE)
library(extrafont)
loadfonts(device = "win")
ggplot(data=as.data.frame(pca$x),aes(x=PC1,y=PC2,col=samples.matrix$condition))+
geom_point(size=2.1,alpha=0.9)+
scale_colour_manual(values=tnPalette)+
ggtitle("PCA plot of cancer and normal samples")+
labs(x="PC1 (11.04%)", y="PC2 (8.63%)")+
theme_classic(base_size = 12)+
theme(#legend.position="bottom",
legend.title=element_blank(),
plot.title = element_text(hjust = 0.1),
text=element_text(size=14,  family="serif"))
ggplot(data=as.data.frame(pca$x),aes(x=PC1,y=PC2,col=samples.matrix$PAM50))+
geom_point(size=2.1,alpha=0.9)+
scale_colour_manual(values=cbPalette)+
ggtitle("PCA plot of PAM50 subtypes and normal samples")+
labs(x="PC1 (11.04%)", y="PC2 (8.63%)")+
theme_classic(base_size = 12)+
theme(#legend.position="bottom",
legend.title=element_blank(),
plot.title = element_text(hjust = 0.1),
text=element_text(size=14,  family="serif"))
d <- data.frame(samples.matrix, pca$x)
p <- d %>%  tbl_df %>%  gather(key="PC", value="score", contains("PC")) %>% filter(PC %in% paste0("PC", 1:9))
ggplot(p, aes(x=PAM50, y=score, fill=PAM50)) +
geom_boxplot(outlier.colour=NaN) +
facet_wrap(~PC) +
scale_fill_manual(values=cbPalette)+
ggtitle("1D PCA plot showing varince along PC1-PC9 \nfor PAM50 subtypes and normal samples")+
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
legend.title=element_blank(),
plot.title = element_text(hjust = 0.5),
text=element_text(size=14,  family="serif"))
rm(list=ls(all=TRUE))
library(SummarizedExperiment)
library(ggplot2)
library(RColorBrewer)
library(dplyr)
setwd("~/Bioinformatics MSc UCPH/0_MasterThesis/TCGAbiolinks/CBL_scripts/TCGA-BRCA_analysis_methods/data/")
source("../BRCA_functions.R")
## most recent all types and stages cancer and normal
samples.matrix<-get(load("BRCA_Illumina_HiSeqnew_updatedSE_allFemale_PreprocessedData_wo_batch_GC_010_sampleMatrix_allTypes_allStages_Female.rda"))
dim(samples.matrix)
########## PRE-ANALYIS STEPS ################
#### rename morphology
samples.matrix<-renameMorph(samples.matrix)
####  add clinical data
samples.matrix<-addClinData(samples.matrix)
#### add PAM50 annotation to samples.matrix and update data SE
PAMNPout<-addPAM50annotation(samples.matrix)
samples.matrix<-PAMNPout$samples.matrix #add annotation
dim(samples.matrix)
head(samples.matrix)
# exclude mrphology samples Ductal mixed with Others
samples.matrix<-samples.matrix[samples.matrix$tumourTypes!="Ductual mixed with others",]
#### colur patette
cbPalette <- c( "#E69F00", "#0072B2", "#F0E442","#D55E00",  "#009E73", "#CC79A7",   "#56B4E9", "black")
#####   TSS (tumour source site)
set1<-subset(samples.matrix[ c("tss","PAM50")])
head(set1)
# Convert character vector to list of symbols
dots <- lapply(names(set1), as.symbol)
# Perform frequency counts
DF1 <- set1 %>%
group_by_(.dots=dots) %>%
summarise(n = n())
head(DF1)
dev.new()
ggplot(DF1, aes(x =tss, y = n, fill = PAM50)) +
geom_bar(stat = "identity")+
scale_fill_manual(values=cbPalette)+
ylab("Count") + xlab("Sample Source Site")+
ggtitle("Stacked barplots of sample counts per source site")+
scale_y_continuous(expand = c(0, 0),breaks = seq(from = 0, by =25, to =250))+
theme_classic()+
theme(legend.position="bottom",
plot.title = element_text(hjust = 0.5),
text=element_text(size=14,  family="serif"))
set5<-subset(samples.matrix[ c("year_diagnosed","tss")])
head(set5)
#### exploring data with stacked barplots
# Convert character vector to list of symbols
dots <- lapply(names(set5), as.symbol)
# Perform frequency counts
DF5 <- set5%>%
group_by_(.dots=dots) %>%
summarise(n = n())
head(DF5)
fortyColours<-c("#3579b4","#c8c049","#8996da","#ee5345","#c84297","#43ea3b","#50a376","#281340","#6e5c41","#94f5d2","#fd0d32","#f19832","#b1f555","#d727b1","#f27456","#4bfe9f","#61789b","#2896be","#db1453","#c7a233","#d9a5c8","#1e785f","#3183e5","#82117f","#e5cbb0","#2dc194","#8f2ccf","#4e8fec","#e7ad8a","#234220","#4cee30","#d7b51c","#c96629","#472134","#36d1c8","#9f6f63","#ac8d3c","#a63dbd","#1db9d9","#10c399")
ggplot(DF5, aes(x =year_diagnosed, y = n, fill = tss)) +
geom_bar(stat = "identity")+
scale_fill_manual(values=fortyColours)+
theme_classic()+
ylab("Count") + xlab("Year")+
scale_y_continuous(expand = c(0, 0),breaks = seq(from = 0, by =25, to =1000))+
theme(legend.position="right",
axis.text.x = element_text(angle = 90, hjust = 1))
rm(list=ls(all=TRUE))
setwd("~/Bioinformatics MSc UCPH/0_MasterThesis/TCGAbiolinks/CBL_scripts/TCGA-BRCA_analysis_methods/data/")
library(SummarizedExperiment)
library(plyr)
library(edgeR)
library(limma)
library(ggplot2)
library(RColorBrewer)
library(dplyr)
setwd("~/Bioinformatics MSc UCPH/0_MasterThesis/TCGAbiolinks/CBL_scripts/TCGA-BRCA_analysis_methods/data/")
source("../BRCA_functions.R")
## most recent all types and stages cancer and normal
dataSE<-get(load("BRCA_Illumina_HiSeqnew_updatedSE_allFemale_PreprocessedData_wo_batch_GC_010_updatedSE_allTypes_allStages_Female.rda"))
samples.matrix<-get(load("BRCA_Illumina_HiSeqnew_updatedSE_allFemale_PreprocessedData_wo_batch_GC_010_sampleMatrix_allTypes_allStages_Female.rda"))
dim(samples.matrix)
dim(dataSE)
########## PRE-ANALYIS STEPS ################
#### rename morphology
samples.matrix<-renameMorph(samples.matrix)
####  add clinical data
samples.matrix<-addClinData(samples.matrix)
#### add PAM50 annotation to samples.matrix and update data SE
PAMNPout<-addPAM50annotation(samples.matrix)
samples.matrix<-PAMNPout$samples.matrix #add annotation
dim(samples.matrix)
sampleTokeepSE <- PAMNPout$samplesToKeep #update SE
dataSE<- dataSE[,colnames(dataSE) %in% sampleTokeepSE]
dim(dataSE)
# exclude mrphology samples Ductal mixed with Others -- it was added at the beginning,
# but later it was decided not use it in the analysis. Therefore this step removes those samples
# from dataSE and samples.matrix
removedsamples<-removeDuctalOther(dataSE, samples.matrix)
dataSE<-removedsamples$dataSE
samples.matrix<-removedsamples$samples.matrix
dim(dataSE)
dim(samples.matrix)
####### SET UP FOR DEA ###########
# edgeR object
dge <- DGEList(counts=dataSE )
# filtering low expression by cpm
cpm <- cpm(dge, log=FALSE)
keep.exprs <- rowSums(cpm > 2) >= 19
dge <- dge[keep.exprs,, keep.lib.sizes=FALSE]
dim(dge) #
# in case you want to save the genes which passes low count filtering and will be used in DEA
#genes_for_DEA<-rownames(dge)
#save(genes_for_DEA, file = "genes_for_DEA.rda")
#check autophagy in the current geneset
#autophagy_genes<- as.vector(read.table("autopahagy_genes.txt", as.is = T, header = FALSE))$V1
#shared <- intersect(autophagy_genes,rownames(dge))
#print(paste0("Total number of genes in analysis: ", length(rownames(dge))))
#print(paste0("Autophagy genes: ", length(shared)))
### add sample annotation data to dge object,
#relevel vectors to always have normal as referece (where makes sense),
#replace NAs with character vectors (e.g. "unknown")
#create Groups
dge<-addSampleData(dge,samples.matrix)
# Scale normalisation: correct for library size
#to match the between-sample distributions of gene counts
#in terms of parameters such as quantiles
y <- calcNormFactors(dge) #default is TMM
design <- model.matrix(~ 0 + PAM50 + age  + tss + year , data=y$samples)
colnames(design) <- gsub("PAM50", "", colnames(design))
# run all, always (adjusts colnames in the design matrix)
colnames(design) <- gsub(":age", ":", colnames(design))
colnames(design) <- gsub(" ", "", colnames(design))
colnames(design) <- gsub("-l", "L", colnames(design))
colnames(design) <- gsub("-", "", colnames(design))
colnames(design)
contr.matrix <- makeContrasts( LumAvsLumB = LuminalA - LuminalB,     #unique comparisons 15
LumAvsBasal = LuminalA - BasalLike,
LumAvsHER2 = LuminalA - HER2enriched,
LumAvsNormLike = LuminalA - NormalLike,
LumAvsNormal = LuminalA - Normal,
#
LumBvsLumA = LuminalB - LuminalA,
LumBvsBasal = LuminalB - BasalLike,
LumBvsHER2 = LuminalB - HER2enriched,
LumBvsNormLike = LuminalB - NormalLike,
LumBvsNormal = LuminalB - Normal,
#
BasalvsLumA = BasalLike- LuminalA,
BasalvsLumB = BasalLike- LuminalB,
BasalvsHER2 = BasalLike- HER2enriched,
BasalvsNormLike = BasalLike - NormalLike,
BasalvsNormal = BasalLike - Normal,
#
HER2vsLumA = HER2enriched- LuminalA,
HER2vsLumB = HER2enriched- LuminalB,
HER2vsBasal = HER2enriched- BasalLike,
HER2vsNormLike = HER2enriched - NormalLike,
HER2vsNormal = HER2enriched - Normal,
##
NormalLikevsLumA = NormalLike- LuminalA,
NormalLikevsLumB = NormalLike- LuminalB,
NormalLikevsBasal = NormalLike- BasalLike,
NormalLikevsHER2 = NormalLike- HER2enriched,
NormalLikevsNormal =NormalLike - Normal,
levels = colnames(design))
DEA_limmaVoom <- function(y, design, contr.matrix=NULL) {
#the voom transformation is applied to the normalized and filtered DGEList object (y)
v <- voom(y, design, plot=F); print ("done Voom")
#After this, the usual limma pipelines for differential expression can be applied
#fit a separate model to the expression values for each gene
vfit <- lmFit(v, design); print ("done lmFit")
#check if conrast matrix was specified and apply it
if (!is.null(contr.matrix)){
print ("Using contrast matrix... ")
vfit <- contrasts.fit(vfit, contrasts=contr.matrix)
}
#apply empirical Bayes to estimate  gene-wise variability
efit <- eBayes(vfit); print ("done eBayes")
#optional
#The model's residual variances are plotted against average expression values
# plotSA(efit,main="plotSA()")
#testing FDR p-val distribution #always check p-val disrubution to make sure FDR worked
#hist(as.vector(as.matrix(efit$p.value[,c(1:ncol(efit$p.value))])), col="red", main="P-values before MTC") #NBBBB not sure if this is the right p-vals
#(mfrow=c(1,1))
return(list(fit=efit, v=v))
}
DEA_filter_save <-function(fit, my_coef, logFC, FDR){
#For a quick look at differential expression levels, the number of significantly up-
#and down-regulated genes can be summarised in a table.
dt<-decideTests(fit, p.value=FDR, lfc= logFC, adjust.method="BH")
print (my_coef)
print (summary(dt)[,c(my_coef)])[2]
tt <- topTable(fit, coef=my_coef, adjust='BH', p.value = FDR, lfc = logFC, n=Inf) #
#this catches situation when there are no DEGs
if (dim(tt)[1]==0) {
return(list(tt=c(1,2,3), dt=dt)) #dummy vector
} else{
### below is only used for saving
index.up <- which(tt$logFC >= logFC & tt$adj.P.Val < FDR)
index.down <- which(tt$logFC <= -logFC & tt$adj.P.Val < FDR)
direction <- c()
direction[index.up] <- "up"
direction[index.down] <- "down"
tt <- cbind(tt,direction)
#final <- list(up, down)
up <- data.frame(rownames(tt[tt$direction == "up", ]))
down <- data.frame(rownames(tt[tt$direction == "down", ]))
####   uncomment to save lists of up/doem genes for each contrast
#setwd("DifferentialExpData")
#write.table(up, paste0(my_coef,"_up.txt"), sep = "\t",col.names = FALSE,row.names = FALSE, quote = FALSE)
#write.table(down, paste0(my_coef,"_down.txt"),sep = "\t", col.names = FALSE, row.names = FALSE, quote = FALSE)
#setwd("../")
return(list(tt=tt, dt=dt))
}
}
set_logFC=1
set_FDR=0.05
DEA_limmaVoom_out<-DEA_limmaVoom(y,design,contr.matrix)
fit<-DEA_limmaVoom_out$fit #fit object
v<-DEA_limmaVoom_out$v #voom object
dt <-DEA_filter_save(fit, my_coef=1, set_logFC , set_FDR)$dt #coef can be anything, the function reports dt for all anyway
summary(dt)
##  3) store genes visualised in previoiscommand in a list object
contrast_DE_list<-list()
for (i in colnames(dt)){
this_coef<-DEA_filter_save(fit, i, set_logFC , set_FDR)$tt
if (typeof(this_coef)!="double") {
contrast_DE_list[[i]]<-this_coef
}else{
#skip the ones with dummy c(1,2,3); those contrast will be ignore in further steps!
}
}
# this is the list object
names(contrast_DE_list)
#eg
contrast_DE_list$LumAvsLumB
# function that extracts gene lists by up/down/both DE
getGeneNames<-function(comparison, direction){
if (direction != 'both'){
genes<-rownames(comparison[which(comparison$direction==direction),])
} else{
genes_up<-rownames(comparison[which(comparison$direction=='up'),])
genes_down<-rownames(comparison[which(comparison$direction=='down'),])
genes<-append(genes_up,genes_down)
}
return(as.character(genes))
}
## 1) create data frames with gene number counts in each contast to use in EA
# (for all genes, autophagy genes, autophagy core genes, and autophagy TF genes)
#create a df to hold all DE genes counts
genesDEdf<-data.frame(matrix( NA,  nrow = length(names(contrast_DE_list)), ncol = 3))
rownames(genesDEdf)<-names(contrast_DE_list)
colnames(genesDEdf)<-c("up","down","both")
head(genesDEdf)
#create a df to hold DE AUTOPHAGY genes counts
genesDE_AUTOdf<-data.frame(matrix( NA,  nrow = length(names(contrast_DE_list)), ncol = 3))
rownames(genesDE_AUTOdf)<-names(contrast_DE_list)
colnames(genesDE_AUTOdf)<-c("up","down","both")
head(genesDE_AUTOdf)
#create a df to hold DE AUTOPHAGY CORE genes counts
genesDE_AUTOCOREdf<-data.frame(matrix( NA,  nrow = length(names(contrast_DE_list)), ncol = 3))
rownames(genesDE_AUTOCOREdf)<-names(contrast_DE_list)
colnames(genesDE_AUTOCOREdf)<-c("up","down","both")
head(genesDE_AUTOCOREdf)
#create a df to hold DE AUTOPHAGY TF genes counts
genesDE_AUTOTFdf<-data.frame(matrix( NA,  nrow = length(names(contrast_DE_list)), ncol = 3))
rownames(genesDE_AUTOTFdf)<-names(contrast_DE_list)
colnames(genesDE_AUTOTFdf)<-c("up","down","both")
head(genesDE_AUTOTFdf)
## 2) fillin in the created data frames
# place holders fro total count
all_genesDE <- c() #  count how many genes were DE in all comparisons
autophagy_genesDE <- c()
autophagyCORE_genesDE <- c()
autophagyTF_genesDE <- c()
for (i in 1:length(rownames(genesDEdf))){
this_contrast<- rownames(genesDEdf)[i]
# get numbers for all DE
# for each contast will store number (length function) of up/down/both DEGs genes
genesDEdf[i,"up"]<- length(getGeneNames(contrast_DE_list[[this_contrast]],'up'))
genesDEdf[i,"down"]<- length(getGeneNames(contrast_DE_list[[this_contrast]],'down'))
genesDEdf[i,"both"]<- length(getGeneNames(contrast_DE_list[[this_contrast]],'both'))
#get numbers for autophagy DE only
# same but aonly for autophagy genes (function sharedWithAuto() is defined in functions.R)
genesDE_AUTOdf[i,"up"]<- length(sharedWithAuto(getGeneNames(contrast_DE_list[[this_contrast]],'up')))
genesDE_AUTOdf[i,"down"]<- length(sharedWithAuto(getGeneNames(contrast_DE_list[[this_contrast]],'down')))
genesDE_AUTOdf[i,"both"]<- length(sharedWithAuto(getGeneNames(contrast_DE_list[[this_contrast]],'both')))
#get numbers for autophagy CORE DE only
genesDE_AUTOCOREdf[i,"up"]<- length(sharedWithAutoCORE(getGeneNames(contrast_DE_list[[this_contrast]],'up')))
genesDE_AUTOCOREdf[i,"down"]<- length(sharedWithAutoCORE(getGeneNames(contrast_DE_list[[this_contrast]],'down')))
genesDE_AUTOCOREdf[i,"both"]<- length(sharedWithAutoCORE(getGeneNames(contrast_DE_list[[this_contrast]],'both')))
#get numbers for autophagy TF DE only
genesDE_AUTOTFdf[i,"up"]<- length(sharedWithAutoTF(getGeneNames(contrast_DE_list[[this_contrast]],'up')))
genesDE_AUTOTFdf[i,"down"]<- length(sharedWithAutoTF(getGeneNames(contrast_DE_list[[this_contrast]],'down')))
genesDE_AUTOTFdf[i,"both"]<- length(sharedWithAutoTF(getGeneNames(contrast_DE_list[[this_contrast]],'both')))
all_genesDE <- unique(sort(append(all_genesDE, getGeneNames(contrast_DE_list[[this_contrast]],'both'))))
autophagy_genesDE <- unique(sort(append(autophagy_genesDE, sharedWithAuto(getGeneNames(contrast_DE_list[[this_contrast]],'both')))))
autophagyCORE_genesDE <- unique(sort(append(autophagyCORE_genesDE, sharedWithAutoCORE(getGeneNames(contrast_DE_list[[this_contrast]],'both')))))
autophagyTF_genesDE <- unique(sort(append(autophagyTF_genesDE, sharedWithAutoTF(getGeneNames(contrast_DE_list[[this_contrast]],'both')))))
}
print("Total number of DEGs:");length(all_genesDE)
print("Autophagy DEGs:");length(autophagy_genesDE)
print("Autophagy core DEGs:");length(autophagyCORE_genesDE)
print("Autophagy TF DEGs:");length(autophagyTF_genesDE)
### 3)  saving data for Enrichment Analysis
setwd("EnrichmentAnalysisData")
save(genesDEdf, file="PAM50_DE_genes_numbers.rda")
save(genesDE_AUTOdf, file="PAM50_DE_AUTO_genes_numbers.rda")
save(genesDE_AUTOCOREdf, file="PAM50_DE_AUTOCORE_genes_numbers.rda")
save(genesDE_AUTOTFdf, file="PAM50_DE_AUTOTF_genes_numbers.rda")
setwd("~/Bioinformatics MSc UCPH/0_MasterThesis/TCGAbiolinks/CBL_scripts/TCGA-BRCA_analysis_methods/data/EnrichmentAnalysisData/")
class<- "PAM50"
DEgenes<- get(load(paste0(class, "_DE_genes_numbers.rda")))
autoALL_DEgenes<- get(load(paste0(class, "_DE_AUTO_genes_numbers.rda")))
autoCORE_DEgenes<- get(load(paste0(class, "_DE_AUTOCORE_genes_numbers.rda")))
autoTF_DEgenes<- get(load(paste0(class, "_DE_AUTOTF_genes_numbers.rda")))
#### 2)   SETTING UP FOR FISHER TEST (enrichment)
N <- 15784 # The total number of genes (this number comes from cpm filtering in DEA >2>=19)
# add columns for enrichment, p.val, p.val.adj in autophagy df
extra_colnames<-c("up_oddsratio", "down_oddsratio", "both_oddsratio",
"up_pval","down_pval","both_pval",
"up_pval.adj","down_pval.adj","both_pval.adj")
fisher_test
fisher_test<-function(DEgenes,DEgenes_group,N,K){
#going to iterate every contrast, up, down, both
for (i in 1:dim(DEgenes)[1]){
for (j in 1:3){
n<-DEgenes[i,j]   # The list of interesting genes - DEGs in this comparison
k<-DEgenes_group[i,j]  #  The number of  autophagy genes in in DEGs of comparison
m <- matrix(c( N - K - n + k,  K - k,
n - k,     k ),
nrow=2, ncol=2,
dimnames = list(c("not Auto", "Auto"),
c("not DE", "DE")))
print(rownames(DEgenes)[i])
print (m)
cat("\n")
#Fisher's exact test:
res <- fisher.test(x=m, alternative="two.sided")
DEgenes_group[i,j+3]<-res$estimate
DEgenes_group[i,j+6]<-res$p.value
}
}
#Correct for multiple testing
DEgenes_group$up_pval.adj <- p.adjust(DEgenes_group$up_pval, method="BH")
DEgenes_group$down_pval.adj <- p.adjust(DEgenes_group$down_pval, method="BH")
DEgenes_group$both_pval.adj <- p.adjust(DEgenes_group$both_pval, method="BH")
return(DEgenes_group)
}
#ALL
autoALL_DEgenes<-cbind(autoALL_DEgenes,matrix(data=NA, nrow=nrow(autoALL_DEgenes), ncol=9))
names(autoALL_DEgenes)[4:12]<-extra_colnames
K <- 1090 # The number of gene belonging to a gene famility---- AUTOPHAGY ALL (in those 15784 genes)
autoALL_DEgenes<-fisher_test(DEgenes,autoALL_DEgenes,N,K)
#CORE
autoCORE_DEgenes<-cbind(autoCORE_DEgenes,matrix(data=NA, nrow=nrow(autoCORE_DEgenes), ncol=9))
names(autoCORE_DEgenes)[4:12]<-extra_colnames
K <- 155 # The number of gene belonging to a gene famility---- AUTOPHAGY CORE
autoCORE_DEgenes<-fisher_test(DEgenes,autoCORE_DEgenes,N,K)
#TF
autoTF_DEgenes<-cbind(autoTF_DEgenes,matrix(data=NA, nrow=nrow(autoTF_DEgenes), ncol=9))
names(autoTF_DEgenes)[4:12]<-extra_colnames
K <- 97 # The number of gene belonging to a gene famility---- AUTOPHAGY TF
autoTF_DEgenes<-fisher_test(DEgenes,autoTF_DEgenes,N,K)
save(autoALL_DEgenes, file=paste0("EA_", class, "_All_autophagy.rda"))
save(autoCORE_DEgenes, file=paste0("EA_", class, "_Core_autophagy.rda"))
save(autoTF_DEgenes, file=paste0("EA_", class, "_TF_autophagy.rda"))
all<-get(load(paste0("EA_", class, "_All_autophagy.rda")))
core<-get(load(paste0("EA_", class, "_Core_autophagy.rda")))
tf<-get(load(paste0("EA_", class, "_TF_autophagy.rda")))
getEnrichedAndSignificant<- function(my_table, adj=TRUE){
if (adj==TRUE){
#by p.adj
table_up <- my_table[,c(1,4,10)]
table_down <- my_table[,c(2,5,11)]
table_both <- my_table[,c(3,6,12)]
out_up<- table_up[table_up$up_oddsratio >=1 & table_up$up_pval.adj <=0.05,]
out_down<- table_down[table_down$down_oddsratio >=1 & table_down$down_pval.adj <=0.05,]
out_both<- table_both[table_both$both_oddsratio >=1 & table_both$both_pval.adj <=0.05,]
} else{  #adj ==FALSE
#by just pval
table_up <- my_table[,c(1,4,7)]
table_down <- my_table[,c(2,5,8)]
table_both <- my_table[,c(3,6,9)]
out_up<- table_up[table_up$up_oddsratio >=1 & table_up$up_pval <=0.05,]
out_down<- table_down[table_down$down_oddsratio >=1 & table_down$down_pval <=0.05,]
out_both<- table_both[table_both$both_oddsratio >=1 & table_both$both_pval <=0.05,]
}
return(list(up = out_up, down = out_down, both = out_both))
}
print(getEnrichedAndSignificant(all))
print(getEnrichedAndSignificant(core))
print(getEnrichedAndSignificant(tf))
print(getEnrichedAndSignificant(all, adj =FALSE))
print(getEnrichedAndSignificant(all, adj =FALSE))
print(getEnrichedAndSignificant(core,adj =FALSE))
print(getEnrichedAndSignificant(tf,adj =FALSE))
rm(list=ls(all=TRUE))
